import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

group = 'com.jme3'
version = '3.0.3'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext {
    bintrayVersion = version
    javafxVersion = '13'
    jetbrainsAnnotation = '19.0.0'
    jmonkeyVersion = '3.2.4-stable'
    rlibVersion = '9.9.0'
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven {
        url  'https://dl.bintray.com/javasabr/maven'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

tasks.withType(Javadoc) {
    failOnError = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        LibArtifact(MavenPublication) {
            from components.java
            groupId group
            artifactId 'jfx'
            version bintrayVersion
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getProperty('bintrayUser')
    key = System.getProperty('bintrayKey')
    publications = ['LibArtifact']
    pkg {
        repo = 'maven'
        name = 'com.jme3.jfx'
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/JavaSaBr/JME3-JFX'
        vcsUrl = 'https://github.com/JavaSaBr/JME3-JFX.git'
        issueTrackerUrl = 'https://github.com/JavaSaBr/JME3-JFX/issues'
        githubRepo = 'JavaSaBr/JME3-JFX'
        githubReleaseNotesFile = 'README.md'
        version {
            name = bintrayVersion
            desc = bintrayVersion
            released  = new Date()
        }
    }
}

dependencies {
    def targetArch = project.hasProperty('targetArch') ? project.property('targetArch') : 'x64'

    def osName = ''
    if (OperatingSystem.current().isLinux()) {
        osName = 'linux'
    } else if (OperatingSystem.current().isMacOsX()) {
        osName = 'mac'
    } else if (OperatingSystem.current().isWindows()) {
        osName = 'win'
    }

    compileOnly     "com.spaceshift:rlib.common:$rlibVersion"
    implementation  "com.spaceshift:rlib.logger.impl:$rlibVersion"
    implementation  "org.jetbrains:annotations:$jetbrainsAnnotation"
    api             "org.jmonkeyengine:jme3-core:$jmonkeyVersion"
    implementation  "org.jmonkeyengine:jme3-lwjgl3:$jmonkeyVersion"
    runtimeOnly     "org.jmonkeyengine:jme3-blender:$jmonkeyVersion"
    runtimeOnly     "org.jmonkeyengine:jme3-jogg:$jmonkeyVersion"
    runtimeOnly     "org.jmonkeyengine:jme3-plugins:$jmonkeyVersion"

    if (targetArch == 'x64' || targetArch == 'x86') {
        api            "org.openjfx:javafx-controls:$javafxVersion:${osName}"
        implementation "org.openjfx:javafx-base:$javafxVersion:${osName}"
        implementation "org.openjfx:javafx-graphics:$javafxVersion:${osName}"
    }
}

wrapper {
    gradleVersion = '6.1.1'
}
